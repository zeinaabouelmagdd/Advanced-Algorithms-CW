#include <iostream>
#include <ctime>
#include <cstdlib>
#include <algorithm>
#include <iomanip>  // Added for fixed and setprecision

using namespace std;

int bubble_sort_count(int arr[], int n) {
    int comparisons = 0;
    for (int i = 0; i < n - 1; i++) {
        bool swapped = false;
        for (int j = 0; j < n - i - 1; j++) {
            comparisons++;
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
                swapped = true;
            }
        }
        if (!swapped)
            break;
    }
    return comparisons;
}

int insertion_sort_count(int arr[], int n) {
    int comparisons = 0;
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0) {
            comparisons++;
            if (arr[j] > key) {
                arr[j + 1] = arr[j];
                j--;
            } else {
                break;
            }
        }
        arr[j + 1] = key;
    }
    return comparisons;
}

int selection_sort_count(int arr[], int n) {
    int comparisons = 0;
    for (int i = 0; i < n - 1; i++) {
        int min_idx = i;
        for (int j = i + 1; j < n; j++) {
            comparisons++;
            if (arr[j] < arr[min_idx])
                min_idx = j;
        }
        if (min_idx != i)
            swap(arr[min_idx], arr[i]);
    }
    return comparisons;
}

void copyArray(int src[], int dest[], int n) {
    for (int i = 0; i < n; i++)
        dest[i] = src[i];
}

void test_comparisons() {
    srand(time(0));

    cout << fixed << setprecision(6);  // Force output in seconds, not scientific notation

    for (int n = 1; n <= 30; n++) {
        int arr[100], temp[100];

        for (int i = 0; i < n; i++)
            arr[i] = rand() % 100;

        cout << "\nArray size: " << n << "\n";

        cout << "Random array:\n";
        copyArray(arr, temp, n);
        clock_t start = clock();
        int c1 = bubble_sort_count(temp, n);
        clock_t end = clock();
        double t1 = double(end - start) / CLOCKS_PER_SEC;

        copyArray(arr, temp, n);
        start = clock();
        int c2 = selection_sort_count(temp, n);
        end = clock();
        double t2 = double(end - start) / CLOCKS_PER_SEC;

        copyArray(arr, temp, n);
        start = clock();
        int c3 = insertion_sort_count(temp, n);
        end = clock();
        double t3 = double(end - start) / CLOCKS_PER_SEC;

        cout << "  Bubble Sort comparisons: " << c1 << ", time: " << t1 << " sec\n";
        cout << "  Selection Sort comparisons: " << c2 << ", time: " << t2 << " sec\n";
        cout << "  Insertion Sort comparisons: " << c3 << ", time: " << t3 << " sec\n";

        sort(arr, arr + n);
        cout << "Sorted array:\n";
        copyArray(arr, temp, n);
        start = clock();
        c1 = bubble_sort_count(temp, n);
        end = clock();
        t1 = double(end - start) / CLOCKS_PER_SEC;

        copyArray(arr, temp, n);
        start = clock();
        c2 = selection_sort_count(temp, n);
        end = clock();
        t2 = double(end - start) / CLOCKS_PER_SEC;

        copyArray(arr, temp, n);
        start = clock();
        c3 = insertion_sort_count(temp, n);
        end = clock();
        t3 = double(end - start) / CLOCKS_PER_SEC;

        cout << "  Bubble Sort comparisons: " << c1 << ", time: " << t1 << " sec\n";
        cout << "  Selection Sort comparisons: " << c2 << ", time: " << t2 << " sec\n";
        cout << "  Insertion Sort comparisons: " << c3 << ", time: " << t3 << " sec\n";

        reverse(arr, arr + n);
        cout << "Reverse sorted array:\n";
        copyArray(arr, temp, n);
        start = clock();
        c1 = bubble_sort_count(temp, n);
        end = clock();
        t1 = double(end - start) / CLOCKS_PER_SEC;

        copyArray(arr, temp, n);
        start = clock();
        c2 = selection_sort_count(temp, n);
        end = clock();
        t2 = double(end - start) / CLOCKS_PER_SEC;

        copyArray(arr, temp, n);
        start = clock();
        c3 = insertion_sort_count(temp, n);
        end = clock();
        t3 = double(end - start) / CLOCKS_PER_SEC;

        cout << "  Bubble Sort comparisons: " << c1 << ", time: " << t1 << " sec\n";
        cout << "  Selection Sort comparisons: " << c2 << ", time: " << t2 << " sec\n";
        cout << "  Insertion Sort comparisons: " << c3 << ", time: " << t3 << " sec\n";
    }
}

int main() {
    test_comparisons();
    return 0;
}
//

#include <iostream>
#include <ctime>
#include <cstdlib>
#include <algorithm>
#include <iomanip>  // Added for fixed and setprecision

using namespace std;

int bubble_sort_count(int arr[], int n) {
    int comparisons = 0;
    for (int i = 0; i < n - 1; i++) {
        bool swapped = false;
        for (int j = 0; j < n - i - 1; j++) {
            comparisons++;
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
                swapped = true;
            }
        }
        if (!swapped)
            break;
    }
    return comparisons;
}

int insertion_sort_count(int arr[], int n) {
    int comparisons = 0;
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0) {
            comparisons++;
            if (arr[j] > key) {
                arr[j + 1] = arr[j];
                j--;
            } else {
                break;
            }
        }
        arr[j + 1] = key;
    }
    return comparisons;
}

int selection_sort_count(int arr[], int n) {
    int comparisons = 0;
    for (int i = 0; i < n - 1; i++) {
        int min_idx = i;
        for (int j = i + 1; j < n; j++) {
            comparisons++;
            if (arr[j] < arr[min_idx])
                min_idx = j;
        }
        if (min_idx != i)
            swap(arr[min_idx], arr[i]);
    }
    return comparisons;
}

void copyArray(int src[], int dest[], int n) {
    for (int i = 0; i < n; i++)
        dest[i] = src[i];
}

void test_comparisons() {
    srand(time(0));

    cout << fixed << setprecision(6);

    cout << "=== COMPARISONS CSV ===\n";
    cout << "Array Size,Bubble Sort,Selection Sort,Insertion Sort\n";

    string timeData = "Array Size,Bubble Sort,Selection Sort,Insertion Sort\n";

    for (int n = 1; n <= 30; n++) {
        int arr[100], temp[100];

        for (int i = 0; i < n; i++)
            arr[i] = rand() % 100;

        // Bubble Sort
        copyArray(arr, temp, n);
        clock_t start = clock();
        int c1 = bubble_sort_count(temp, n);
        clock_t end = clock();
        double t1 = double(end - start) / CLOCKS_PER_SEC;

        // Selection Sort
        copyArray(arr, temp, n);
        start = clock();
        int c2 = selection_sort_count(temp, n);
        end = clock();
        double t2 = double(end - start) / CLOCKS_PER_SEC;

        // Insertion Sort
        copyArray(arr, temp, n);
        start = clock();
        int c3 = insertion_sort_count(temp, n);
        end = clock();
        double t3 = double(end - start) / CLOCKS_PER_SEC;

        // Print CSV line for comparisons
        cout << n << "," << c1 << "," << c2 << "," << c3 << "\n";

        // Append CSV line for times
        timeData += to_string(n) + "," +
                    to_string(t1) + "," +
                    to_string(t2) + "," +
                    to_string(t3) + "\n";
    }

    cout << "\n\n=== TIMES CSV ===\n";
    cout << timeData;
}


int main() {
    test_comparisons();
    return 0;
}
